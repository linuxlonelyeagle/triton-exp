module {
  func public @amax_kernel_2_0d1d2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32) {
    %cst = arith.constant dense<0xFF800000> : tensor<8xf32>
    %0 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32>
    %1 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<8x!tt.ptr<f32>>
    %2 = tt.addptr %1, %0 : tensor<8x!tt.ptr<f32>>, tensor<8xi32>
    %3 = tt.splat %arg2 : (i32) -> tensor<8xi32>
    %4 = arith.cmpi slt, %0, %3 : tensor<8xi32>
    %5 = tt.load %2, %4, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<8xf32>
    %6 = tt.reduce %5 {axis = 0 : i32, redOp = 12 : i32} : tensor<8xf32> -> f32
    tt.store %arg1, %6 : f32
    return
  }
}
