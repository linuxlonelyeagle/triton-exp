#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("/root/tutorials/vector-add-type.py":27:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:80", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @add_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/tutorials/vector-add-type.py":27:0), %arg1: !tt.ptr<f64> {tt.divisibility = 16 : i32} loc("/root/tutorials/vector-add-type.py":27:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/tutorials/vector-add-type.py":27:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/root/tutorials/vector-add-type.py":27:0)) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c1024_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<1024xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<1024xi32, #blocked> loc(#loc5)
    %5 = tt.splat %arg3 : i32 -> tensor<1024xi32, #blocked> loc(#loc6)
    %6 = arith.cmpi slt, %4, %5 : tensor<1024xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc7)
    %9 = tt.load %8, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg1 : !tt.ptr<f64> -> tensor<1024x!tt.ptr<f64>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %4 : tensor<1024x!tt.ptr<f64>, #blocked>, tensor<1024xi32, #blocked> loc(#loc9)
    %12 = tt.load %11, %6 : tensor<1024x!tt.ptr<f64>, #blocked> loc(#loc10)
    %13 = arith.extf %9 : tensor<1024xf32, #blocked> to tensor<1024xf64, #blocked> loc(#loc11)
    %14 = arith.addf %13, %12 : tensor<1024xf64, #blocked> loc(#loc11)
    %15 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = tt.addptr %15, %4 : tensor<1024x!tt.ptr<f32>, #blocked>, tensor<1024xi32, #blocked> loc(#loc12)
    %17 = arith.truncf %14 : tensor<1024xf64, #blocked> to tensor<1024xf32, #blocked> loc(#loc13)
    tt.store %16, %17, %6 : tensor<1024x!tt.ptr<f32>, #blocked> loc(#loc13)
    tt.return loc(#loc14)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/root/tutorials/vector-add-type.py":36:24)
#loc3 = loc("/root/tutorials/vector-add-type.py":41:24)
#loc4 = loc("/root/tutorials/vector-add-type.py":42:41)
#loc5 = loc("/root/tutorials/vector-add-type.py":42:28)
#loc6 = loc("/root/tutorials/vector-add-type.py":44:21)
#loc7 = loc("/root/tutorials/vector-add-type.py":47:24)
#loc8 = loc("/root/tutorials/vector-add-type.py":47:16)
#loc9 = loc("/root/tutorials/vector-add-type.py":48:24)
#loc10 = loc("/root/tutorials/vector-add-type.py":48:16)
#loc11 = loc("/root/tutorials/vector-add-type.py":49:17)
#loc12 = loc("/root/tutorials/vector-add-type.py":51:26)
#loc13 = loc("/root/tutorials/vector-add-type.py":51:35)
#loc14 = loc("/root/tutorials/vector-add-type.py":51:4)
