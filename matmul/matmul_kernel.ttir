module {
  func public @matmul_kernel_0d1d2d3d4d5d6d7c8d9c10d11c(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32}, %arg3: i32 {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}, %arg5: i32 {tt.divisibility = 16 : i32}, %arg6: i32 {tt.divisibility = 16 : i32}, %arg7: i32 {tt.divisibility = 16 : i32}, %arg8: i32 {tt.divisibility = 16 : i32}) {
    %c64_i32 = arith.constant 64 : i32
    %cst = arith.constant dense<64> : tensor<128x64xi32>
    %c64 = arith.constant 64 : index
    %c0 = arith.constant 0 : index
    %c128_i32 = arith.constant 128 : i32
    %c127_i32 = arith.constant 127 : i32
    %c256_i32 = arith.constant 256 : i32
    %c255_i32 = arith.constant 255 : i32
    %c8_i32 = arith.constant 8 : i32
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x256xf32>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = arith.addi %arg3, %c127_i32 : i32
    %2 = arith.divsi %1, %c128_i32 : i32
    %3 = arith.addi %arg4, %c255_i32 : i32
    %4 = arith.divsi %3, %c256_i32 : i32
    %5 = arith.muli %4, %c8_i32 : i32
    %6 = arith.divsi %0, %5 : i32
    %7 = arith.muli %6, %c8_i32 : i32
    %8 = arith.subi %2, %7 : i32
    %9 = arith.cmpi slt, %8, %c8_i32 : i32
    %10 = select %9, %8, %c8_i32 : i32
    %11 = arith.remsi %0, %10 : i32
    %12 = arith.addi %7, %11 : i32
    %13 = arith.remsi %0, %5 : i32
    %14 = arith.divsi %13, %10 : i32
    %15 = arith.muli %12, %c128_i32 : i32
    %16 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32>
    %17 = tt.splat %15 : (i32) -> tensor<128xi32>
    %18 = arith.addi %17, %16 : tensor<128xi32>
    %19 = arith.muli %14, %c256_i32 : i32
    %20 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32>
    %21 = tt.splat %19 : (i32) -> tensor<256xi32>
    %22 = arith.addi %21, %20 : tensor<256xi32>
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32>
    %24 = tt.expand_dims %18 {axis = 1 : i32} : (tensor<128xi32>) -> tensor<128x1xi32>
    %25 = tt.splat %arg6 : (i32) -> tensor<128x1xi32>
    %26 = arith.muli %24, %25 : tensor<128x1xi32>
    %27 = tt.expand_dims %23 {axis = 0 : i32} : (tensor<64xi32>) -> tensor<1x64xi32>
    %28 = tt.broadcast %26 : (tensor<128x1xi32>) -> tensor<128x64xi32>
    %29 = tt.broadcast %27 : (tensor<1x64xi32>) -> tensor<128x64xi32>
    %30 = arith.addi %28, %29 : tensor<128x64xi32>
    %31 = tt.splat %arg0 : (!tt.ptr<f16>) -> tensor<128x64x!tt.ptr<f16>>
    %32 = tt.addptr %31, %30 : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32>
    %33 = tt.expand_dims %23 {axis = 1 : i32} : (tensor<64xi32>) -> tensor<64x1xi32>
    %34 = tt.splat %arg7 : (i32) -> tensor<64x1xi32>
    %35 = arith.muli %33, %34 : tensor<64x1xi32>
    %36 = tt.expand_dims %22 {axis = 0 : i32} : (tensor<256xi32>) -> tensor<1x256xi32>
    %37 = tt.broadcast %35 : (tensor<64x1xi32>) -> tensor<64x256xi32>
    %38 = tt.broadcast %36 : (tensor<1x256xi32>) -> tensor<64x256xi32>
    %39 = arith.addi %37, %38 : tensor<64x256xi32>
    %40 = tt.splat %arg1 : (!tt.ptr<f16>) -> tensor<64x256x!tt.ptr<f16>>
    %41 = tt.addptr %40, %39 : tensor<64x256x!tt.ptr<f16>>, tensor<64x256xi32>
    %42 = arith.index_cast %arg5 : i32 to index
    %43 = arith.muli %arg7, %c64_i32 : i32
    %44 = tt.splat %43 : (i32) -> tensor<64x256xi32>
    %45:3 = scf.for %arg9 = %c0 to %42 step %c64 iter_args(%arg10 = %cst_0, %arg11 = %32, %arg12 = %41) -> (tensor<128x256xf32>, tensor<128x64x!tt.ptr<f16>>, tensor<64x256x!tt.ptr<f16>>) {
      %61 = tt.load %arg11 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<128x64xf16>
      %62 = tt.load %arg12 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<64x256xf16>
      %63 = tt.dot %61, %62, %arg10 {allowTF32 = true} : tensor<128x64xf16> * tensor<64x256xf16> -> tensor<128x256xf32>
      %64 = tt.addptr %arg11, %cst : tensor<128x64x!tt.ptr<f16>>, tensor<128x64xi32>
      %65 = tt.addptr %arg12, %44 : tensor<64x256x!tt.ptr<f16>>, tensor<64x256xi32>
      scf.yield %63, %64, %65 : tensor<128x256xf32>, tensor<128x64x!tt.ptr<f16>>, tensor<64x256x!tt.ptr<f16>>
    }
    %46 = arith.truncf %45#0 : tensor<128x256xf32> to tensor<128x256xf16>
    %47 = tt.splat %arg8 : (i32) -> tensor<128x1xi32>
    %48 = arith.muli %47, %24 : tensor<128x1xi32>
    %49 = tt.splat %arg2 : (!tt.ptr<f16>) -> tensor<128x1x!tt.ptr<f16>>
    %50 = tt.addptr %49, %48 : tensor<128x1x!tt.ptr<f16>>, tensor<128x1xi32>
    %51 = tt.broadcast %50 : (tensor<128x1x!tt.ptr<f16>>) -> tensor<128x256x!tt.ptr<f16>>
    %52 = tt.broadcast %36 : (tensor<1x256xi32>) -> tensor<128x256xi32>
    %53 = tt.addptr %51, %52 : tensor<128x256x!tt.ptr<f16>>, tensor<128x256xi32>
    %54 = tt.splat %arg3 : (i32) -> tensor<128x1xi32>
    %55 = arith.cmpi slt, %24, %54 : tensor<128x1xi32>
    %56 = tt.splat %arg4 : (i32) -> tensor<1x256xi32>
    %57 = arith.cmpi slt, %36, %56 : tensor<1x256xi32>
    %58 = tt.broadcast %55 : (tensor<128x1xi1>) -> tensor<128x256xi1>
    %59 = tt.broadcast %57 : (tensor<1x256xi1>) -> tensor<128x256xi1>
    %60 = arith.andi %58, %59 : tensor<128x256xi1>
    tt.store %53, %46, %60 : tensor<128x256xf16>
    return
  }
}
