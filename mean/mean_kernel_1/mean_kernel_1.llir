; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8]

; Function Attrs: nounwind
define void @mean_kernel_1_0d1d2(i64 addrspace(1)* %0, i64 addrspace(1)* %1, i32 %2) local_unnamed_addr #0 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %5 = and i32 %4, 31
  %6 = lshr i32 %4, 5
  %7 = and i32 %4, 63
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %9 = shl i32 %8, 6
  %10 = or i32 %9, %7
  %11 = sext i32 %10 to i64
  %12 = getelementptr i64, i64 addrspace(1)* %0, i64 %11
  %13 = icmp slt i32 %10, %2
  %14 = tail call i64 asm sideeffect "@$2 ld.global.b64 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u64 $0, $3;", "=l,l,b,l,b"(i64 addrspace(1)* %12, i1 %13, i64 0, i1 %13) #0
  %15 = icmp eq i32 %5, 0
  %16 = bitcast i64 %14 to <2 x float>
  %17 = extractelement <2 x float> %16, i64 0
  %18 = extractelement <2 x float> %16, i64 1
  %19 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r"(float %17) #0
  %20 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x10, 0x1f, 0xffffffff;", "=r,r"(float %18) #0
  %21 = insertelement <2 x float> undef, float %19, i64 0
  %22 = insertelement <2 x float> %21, float %20, i64 1
  %23 = bitcast <2 x float> %22 to i64
  %24 = add i64 %14, %23
  %25 = bitcast i64 %24 to <2 x float>
  %26 = extractelement <2 x float> %25, i64 0
  %27 = extractelement <2 x float> %25, i64 1
  %28 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r"(float %26) #0
  %29 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x8, 0x1f, 0xffffffff;", "=r,r"(float %27) #0
  %30 = insertelement <2 x float> undef, float %28, i64 0
  %31 = insertelement <2 x float> %30, float %29, i64 1
  %32 = bitcast <2 x float> %31 to i64
  %33 = add i64 %24, %32
  %34 = bitcast i64 %33 to <2 x float>
  %35 = extractelement <2 x float> %34, i64 0
  %36 = extractelement <2 x float> %34, i64 1
  %37 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r"(float %35) #0
  %38 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x4, 0x1f, 0xffffffff;", "=r,r"(float %36) #0
  %39 = insertelement <2 x float> undef, float %37, i64 0
  %40 = insertelement <2 x float> %39, float %38, i64 1
  %41 = bitcast <2 x float> %40 to i64
  %42 = add i64 %33, %41
  %43 = bitcast i64 %42 to <2 x float>
  %44 = extractelement <2 x float> %43, i64 0
  %45 = extractelement <2 x float> %43, i64 1
  %46 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r"(float %44) #0
  %47 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x2, 0x1f, 0xffffffff;", "=r,r"(float %45) #0
  %48 = insertelement <2 x float> undef, float %46, i64 0
  %49 = insertelement <2 x float> %48, float %47, i64 1
  %50 = bitcast <2 x float> %49 to i64
  %51 = add i64 %42, %50
  %52 = bitcast i64 %51 to <2 x float>
  %53 = extractelement <2 x float> %52, i64 0
  %54 = extractelement <2 x float> %52, i64 1
  %55 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %53) #0
  %56 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %54) #0
  %57 = insertelement <2 x float> undef, float %55, i64 0
  %58 = insertelement <2 x float> %57, float %56, i64 1
  %59 = bitcast <2 x float> %58 to i64
  %60 = add i64 %51, %59
  %61 = zext i32 %6 to i64
  %62 = getelementptr i64, i64 addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to i64 addrspace(3)*), i64 %61
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(i64 addrspace(3)* %62, i64 %60, i1 %15) #0
  tail call void @llvm.nvvm.barrier0()
  %63 = sext i32 %4 to i64
  %64 = getelementptr i64, i64 addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to i64 addrspace(3)*), i64 %63
  %65 = load i64, i64 addrspace(3)* %64, align 4
  %66 = bitcast i64 %65 to <2 x float>
  %67 = extractelement <2 x float> %66, i64 0
  %68 = extractelement <2 x float> %66, i64 1
  %69 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %67) #0
  %70 = tail call float asm "shfl.sync.bfly.b32 $0, $1, 0x1, 0x1f, 0xffffffff;", "=r,r"(float %68) #0
  %71 = insertelement <2 x float> undef, float %69, i64 0
  %72 = insertelement <2 x float> %71, float %70, i64 1
  %73 = bitcast <2 x float> %72 to i64
  %74 = add i64 %65, %73
  %75 = icmp slt i32 %4, 2
  %76 = and i32 %4, 1
  %77 = icmp eq i32 %76, 0
  %78 = and i1 %75, %77
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(i64 addrspace(3)* %64, i64 %74, i1 %78) #0
  tail call void @llvm.nvvm.barrier0()
  %79 = load i64, i64 addrspace(3)* bitcast ([0 x i8] addrspace(3)* @global_smem to i64 addrspace(3)*), align 4
  %80 = sext i32 %8 to i64
  %81 = getelementptr i64, i64 addrspace(1)* %1, i64 %80
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %79, i64 addrspace(1)* %81, i1 true) #0
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: convergent nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { convergent nounwind }

!nvvm.annotations = !{!0, !1, !0}

!0 = !{void (i64 addrspace(1)*, i64 addrspace(1)*, i32)* @mean_kernel_1_0d1d2, !"kernel", i32 1}
!1 = !{void (i64 addrspace(1)*, i64 addrspace(1)*, i32)* @mean_kernel_1_0d1d2, !"maxntidx", i32 128}
