#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32} {
  func public @mean_kernel_2_0d1d23d(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg2: i32, %arg3: i32 {tt.divisibility = 16 : i32}) {
    %cst = arith.constant dense<0.000000e+00> : tensor<32xf32, #blocked>
    %0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #blocked>
    %1 = tt.splat %arg0 : (!tt.ptr<i64>) -> tensor<32x!tt.ptr<i64>, #blocked>
    %2 = tt.addptr %1, %0 : tensor<32x!tt.ptr<i64>, #blocked>, tensor<32xi32, #blocked>
    %3 = tt.splat %arg3 : (i32) -> tensor<32xi32, #blocked>
    %4 = "triton_gpu.cmpi"(%0, %3) {predicate = 2 : i64} : (tensor<32xi32, #blocked>, tensor<32xi32, #blocked>) -> tensor<32xi1, #blocked>
    %5 = arith.fptosi %cst : tensor<32xf32, #blocked> to tensor<32xi64, #blocked>
    %6 = tt.load %2, %4, %5 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32xi64, #blocked>
    %7 = tt.reduce %6 {axis = 0 : i32, redOp = 1 : i32} : tensor<32xi64, #blocked> -> i64
    %8 = arith.extsi %arg2 : i32 to i64
    %9 = arith.sitofp %7 : i64 to f32
    %10 = arith.sitofp %8 : i64 to f32
    %11 = arith.divf %9, %10 : f32
    %12 = arith.fptosi %11 : f32 to i64
    tt.store %arg1, %12 : i64
    return
  }
}
