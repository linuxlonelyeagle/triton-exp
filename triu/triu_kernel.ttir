module {
  func public @triu_kernel_0d1d234d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32, %arg3: i32, %arg4: i32 {tt.divisibility = 16 : i32}) {
    %c32_i32 = arith.constant 32 : i32
    %c0 = arith.constant 0 : index
    %c8 = arith.constant 8 : index
    %cst = arith.constant dense<0.000000e+00> : tensor<32x8xf32>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = arith.muli %0, %c32_i32 : i32
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %3 = tt.expand_dims %2 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %4 = tt.splat %1 : (i32) -> tensor<32x1xi32>
    %5 = arith.addi %4, %3 : tensor<32x1xi32>
    %6 = tt.splat %arg2 : (i32) -> tensor<32x1xi32>
    %7 = arith.cmpi slt, %5, %6 : tensor<32x1xi32>
    %8 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %9 = arith.muli %5, %8 : tensor<32x1xi32>
    %10 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %11 = tt.addptr %10, %9 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %12 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %13 = tt.addptr %12, %9 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %14 = arith.index_cast %arg3 : i32 to index
    %15 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32>
    %16 = tt.expand_dims %15 {axis = 0 : i32} : (tensor<8xi32>) -> tensor<1x8xi32>
    %17 = tt.splat %arg3 : (i32) -> tensor<1x8xi32>
    %18 = tt.broadcast %7 : (tensor<32x1xi1>) -> tensor<32x8xi1>
    %19 = tt.broadcast %11 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x8x!tt.ptr<f32>>
    %20 = tt.splat %arg4 : (i32) -> tensor<32x1xi32>
    %21 = arith.addi %5, %20 : tensor<32x1xi32>
    %22 = tt.broadcast %21 : (tensor<32x1xi32>) -> tensor<32x8xi32>
    %23 = tt.broadcast %13 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x8x!tt.ptr<f32>>
    scf.for %arg5 = %c0 to %14 step %c8 {
      %24 = arith.index_cast %arg5 : index to i32
      %25 = tt.splat %24 : (i32) -> tensor<1x8xi32>
      %26 = arith.addi %25, %16 : tensor<1x8xi32>
      %27 = arith.cmpi slt, %26, %17 : tensor<1x8xi32>
      %28 = tt.broadcast %27 : (tensor<1x8xi1>) -> tensor<32x8xi1>
      %29 = arith.andi %18, %28 : tensor<32x8xi1>
      %30 = tt.broadcast %26 : (tensor<1x8xi32>) -> tensor<32x8xi32>
      %31 = tt.addptr %19, %30 : tensor<32x8x!tt.ptr<f32>>, tensor<32x8xi32>
      %32 = tt.load %31, %29, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x8xf32>
      %33 = arith.cmpi sle, %22, %30 : tensor<32x8xi32>
      %34 = select %33, %32, %cst : tensor<32x8xi1>, tensor<32x8xf32>
      %35 = tt.addptr %23, %30 : tensor<32x8x!tt.ptr<f32>>, tensor<32x8xi32>
      tt.store %35, %34, %29 : tensor<32x8xf32>
    }
    return
  }
}
