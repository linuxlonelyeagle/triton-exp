module {
  func public @triu_batch_kernel_0d1d2345d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32, %arg3: i32, %arg4: i32, %arg5: i32 {tt.divisibility = 16 : i32}) {
    %c32_i32 = arith.constant 32 : i32
    %c8_i32 = arith.constant 8 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<32x8xf32>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = tt.get_program_id {axis = 1 : i32} : i32
    %2 = arith.muli %0, %c32_i32 : i32
    %3 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32>
    %4 = tt.expand_dims %3 {axis = 1 : i32} : (tensor<32xi32>) -> tensor<32x1xi32>
    %5 = tt.splat %2 : (i32) -> tensor<32x1xi32>
    %6 = arith.addi %5, %4 : tensor<32x1xi32>
    %7 = tt.splat %arg2 : (i32) -> tensor<32x1xi32>
    %8 = arith.cmpi slt, %6, %7 : tensor<32x1xi32>
    %9 = tt.splat %arg3 : (i32) -> tensor<32x1xi32>
    %10 = arith.muli %6, %9 : tensor<32x1xi32>
    %11 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %12 = tt.addptr %11, %10 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %13 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<32x1x!tt.ptr<f32>>
    %14 = tt.addptr %13, %10 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32>
    %15 = arith.muli %1, %c8_i32 : i32
    %16 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32>
    %17 = tt.expand_dims %16 {axis = 0 : i32} : (tensor<8xi32>) -> tensor<1x8xi32>
    %18 = tt.splat %15 : (i32) -> tensor<1x8xi32>
    %19 = arith.addi %18, %17 : tensor<1x8xi32>
    %20 = tt.splat %arg3 : (i32) -> tensor<1x8xi32>
    %21 = arith.cmpi slt, %19, %20 : tensor<1x8xi32>
    %22 = tt.broadcast %8 : (tensor<32x1xi1>) -> tensor<32x8xi1>
    %23 = tt.broadcast %21 : (tensor<1x8xi1>) -> tensor<32x8xi1>
    %24 = arith.andi %22, %23 : tensor<32x8xi1>
    %25 = tt.broadcast %12 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x8x!tt.ptr<f32>>
    %26 = tt.broadcast %19 : (tensor<1x8xi32>) -> tensor<32x8xi32>
    %27 = tt.addptr %25, %26 : tensor<32x8x!tt.ptr<f32>>, tensor<32x8xi32>
    %28 = tt.load %27, %24, %cst {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<32x8xf32>
    %29 = tt.splat %arg4 : (i32) -> tensor<1x8xi32>
    %30 = arith.divsi %19, %29 : tensor<1x8xi32>
    %31 = arith.remsi %19, %29 : tensor<1x8xi32>
    %32 = tt.splat %arg5 : (i32) -> tensor<1x8xi32>
    %33 = arith.addi %30, %32 : tensor<1x8xi32>
    %34 = arith.cmpi sle, %33, %31 : tensor<1x8xi32>
    %35 = tt.broadcast %34 : (tensor<1x8xi1>) -> tensor<32x8xi1>
    %36 = select %35, %28, %cst : tensor<32x8xi1>, tensor<32x8xf32>
    %37 = tt.broadcast %14 : (tensor<32x1x!tt.ptr<f32>>) -> tensor<32x8x!tt.ptr<f32>>
    %38 = tt.addptr %37, %26 : tensor<32x8x!tt.ptr<f32>>, tensor<32x8xi32>
    tt.store %38, %36, %24 : tensor<32x8xf32>
    return
  }
}
