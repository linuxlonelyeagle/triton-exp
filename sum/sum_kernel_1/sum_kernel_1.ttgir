#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
module attributes {"triton_gpu.num-warps" = 4 : i32} {
  func public @sum_kernel_1_0d1d2(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32}, %arg2: i32) {
    %cst = arith.constant dense<0.000000e+00> : tensor<16xf32, #blocked>
    %c16_i32 = arith.constant 16 : i32
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = arith.muli %0, %c16_i32 : i32
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #blocked>
    %3 = tt.splat %1 : (i32) -> tensor<16xi32, #blocked>
    %4 = arith.addi %3, %2 : tensor<16xi32, #blocked>
    %5 = tt.splat %arg0 : (!tt.ptr<i64>) -> tensor<16x!tt.ptr<i64>, #blocked>
    %6 = tt.addptr %5, %4 : tensor<16x!tt.ptr<i64>, #blocked>, tensor<16xi32, #blocked>
    %7 = tt.splat %arg2 : (i32) -> tensor<16xi32, #blocked>
    %8 = "triton_gpu.cmpi"(%4, %7) {predicate = 2 : i64} : (tensor<16xi32, #blocked>, tensor<16xi32, #blocked>) -> tensor<16xi1, #blocked>
    %9 = arith.fptosi %cst : tensor<16xf32, #blocked> to tensor<16xi64, #blocked>
    %10 = tt.load %6, %8, %9 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<16xi64, #blocked>
    %11 = tt.reduce %10 {axis = 0 : i32, redOp = 1 : i32} : tensor<16xi64, #blocked> -> i64
    %12 = tt.addptr %arg1, %0 : !tt.ptr<i64>, i32
    tt.store %12, %11 : i64
    return
  }
}
