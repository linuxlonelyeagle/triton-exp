module {
  func public @neg_kernel_0d1d2d(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: i32 {tt.divisibility = 16 : i32}) {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0.000000e+00> : tensor<4xf32>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.splat %1 : (i32) -> tensor<4xi32>
    %4 = arith.addi %3, %2 : tensor<4xi32>
    %5 = tt.splat %arg2 : (i32) -> tensor<4xi32>
    %6 = arith.cmpi slt, %4, %5 : tensor<4xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<f32>) -> tensor<4x!tt.ptr<f32>>
    %8 = tt.addptr %7, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %9 = tt.load %8, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4xf32>
    %10 = arith.subf %cst, %9 : tensor<4xf32>
    %11 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<4x!tt.ptr<f32>>
    %12 = tt.addptr %11, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    tt.store %12, %10, %6 : tensor<4xf32>
    return
  }
}
