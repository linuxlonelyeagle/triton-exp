module {
  func public @where_tensor_tensor_kernel_0d1d2d3d4d(%arg0: !tt.ptr<i1> {tt.divisibility = 16 : i32}, %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32}, %arg4: i32 {tt.divisibility = 16 : i32}) {
    %c4_i32 = arith.constant 4 : i32
    %cst = arith.constant dense<0> : tensor<4xi8>
    %0 = tt.get_program_id {axis = 0 : i32} : i32
    %1 = arith.muli %0, %c4_i32 : i32
    %2 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32>
    %3 = tt.splat %1 : (i32) -> tensor<4xi32>
    %4 = arith.addi %3, %2 : tensor<4xi32>
    %5 = tt.splat %arg4 : (i32) -> tensor<4xi32>
    %6 = arith.cmpi slt, %4, %5 : tensor<4xi32>
    %7 = tt.splat %arg0 : (!tt.ptr<i1>) -> tensor<4x!tt.ptr<i1>>
    %8 = tt.addptr %7, %4 : tensor<4x!tt.ptr<i1>>, tensor<4xi32>
    %9 = tt.bitcast %8 : tensor<4x!tt.ptr<i1>> -> tensor<4x!tt.ptr<i8>>
    %10 = tt.load %9, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4xi8>
    %11 = tt.splat %arg1 : (!tt.ptr<f32>) -> tensor<4x!tt.ptr<f32>>
    %12 = tt.addptr %11, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %13 = tt.load %12, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4xf32>
    %14 = tt.splat %arg2 : (!tt.ptr<f32>) -> tensor<4x!tt.ptr<f32>>
    %15 = tt.addptr %14, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    %16 = tt.load %15, %6 {cache = 1 : i32, evict = 1 : i32, isVolatile = false} : tensor<4xf32>
    %17 = arith.cmpi ne, %10, %cst : tensor<4xi8>
    %18 = select %17, %13, %16 : tensor<4xi1>, tensor<4xf32>
    %19 = tt.splat %arg3 : (!tt.ptr<f32>) -> tensor<4x!tt.ptr<f32>>
    %20 = tt.addptr %19, %4 : tensor<4x!tt.ptr<f32>>, tensor<4xi32>
    tt.store %20, %18, %6 : tensor<4xf32>
    return
  }
}
