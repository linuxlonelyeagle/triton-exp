; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

; Function Attrs: nounwind
define void @dropout_forward_kernel_0d1d2d345(float addrspace(1)* %0, float addrspace(1)* %1, i32 %2, float %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x()
  %8 = and i32 %7, 127
  %9 = ashr i32 %5, 31
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x()
  %11 = shl i32 %10, 7
  %12 = or i32 %11, %8
  %13 = add i32 %12, %5
  %14 = ashr i32 %4, 31
  %15 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 0) #0
  %16 = xor i32 %15, %4
  %17 = xor i32 %16, %9
  %18 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %13) #0
  %19 = xor i32 %18, %14
  %20 = mul i32 %13, -766435501
  %21 = add i32 %4, -1640531527
  %22 = add nsw i32 %14, -1150833019
  %23 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %19) #0
  %24 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %17) #0
  %25 = xor i32 %20, %22
  %26 = insertelement <4 x i32> poison, i32 %17, i64 0
  %27 = insertelement <4 x i32> %26, i32 %25, i64 1
  %28 = insertelement <4 x i32> %27, i32 %19, i64 2
  %29 = insertelement <4 x i32> %28, i32 %23, i64 3
  %30 = insertelement <4 x i32> <i32 -766435501, i32 poison, i32 -845247145, i32 poison>, i32 %24, i64 1
  %31 = insertelement <4 x i32> %30, i32 %21, i64 3
  %32 = mul <4 x i32> %29, %31
  %33 = xor <4 x i32> %29, %31
  %34 = shufflevector <4 x i32> %32, <4 x i32> %33, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %35 = add i32 %4, 1013904242
  %36 = add nsw i32 %14, 1993301258
  %37 = extractelement <4 x i32> %33, i64 1
  %38 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %37) #0
  %39 = extractelement <4 x i32> %33, i64 3
  %40 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %39) #0
  %41 = insertelement <4 x i32> <i32 poison, i32 -845247145, i32 poison, i32 -766435501>, i32 %36, i64 0
  %42 = insertelement <4 x i32> %41, i32 %35, i64 2
  %43 = xor <4 x i32> %34, %42
  %44 = mul <4 x i32> %34, %42
  %45 = shufflevector <4 x i32> %43, <4 x i32> %44, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %46 = add i32 %4, -626627285
  %47 = add nsw i32 %14, 842468239
  %48 = insertelement <4 x i32> poison, i32 %40, i64 0
  %49 = insertelement <4 x i32> %48, i32 %46, i64 1
  %50 = insertelement <4 x i32> %49, i32 %38, i64 2
  %51 = insertelement <4 x i32> %50, i32 %47, i64 3
  %52 = xor <4 x i32> %45, %51
  %53 = extractelement <4 x i32> %52, i64 0
  %54 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %53) #0
  %55 = extractelement <4 x i32> %52, i64 2
  %56 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %55) #0
  %57 = insertelement <4 x i32> <i32 -845247145, i32 poison, i32 -766435501, i32 poison>, i32 %54, i64 1
  %58 = insertelement <4 x i32> %57, i32 %56, i64 3
  %59 = mul <4 x i32> %52, %58
  %60 = xor <4 x i32> %52, %58
  %61 = shufflevector <4 x i32> %59, <4 x i32> %60, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %62 = add i32 %4, 2027808484
  %63 = add nsw i32 %14, -308364780
  %64 = extractelement <4 x i32> %60, i64 3
  %65 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %64) #0
  %66 = extractelement <4 x i32> %60, i64 1
  %67 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %66) #0
  %68 = insertelement <4 x i32> <i32 poison, i32 -766435501, i32 poison, i32 -845247145>, i32 %62, i64 0
  %69 = insertelement <4 x i32> %68, i32 %63, i64 2
  %70 = xor <4 x i32> %61, %69
  %71 = mul <4 x i32> %61, %69
  %72 = shufflevector <4 x i32> %70, <4 x i32> %71, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %73 = add i32 %4, 387276957
  %74 = add nsw i32 %14, -1459197799
  %75 = insertelement <4 x i32> poison, i32 %65, i64 0
  %76 = insertelement <4 x i32> %75, i32 %74, i64 1
  %77 = insertelement <4 x i32> %76, i32 %67, i64 2
  %78 = insertelement <4 x i32> %77, i32 %73, i64 3
  %79 = xor <4 x i32> %72, %78
  %80 = extractelement <4 x i32> %79, i64 2
  %81 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %80) #0
  %82 = extractelement <4 x i32> %79, i64 0
  %83 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %82) #0
  %84 = insertelement <4 x i32> <i32 -766435501, i32 poison, i32 -845247145, i32 poison>, i32 %83, i64 1
  %85 = insertelement <4 x i32> %84, i32 %81, i64 3
  %86 = mul <4 x i32> %79, %85
  %87 = xor <4 x i32> %79, %85
  %88 = shufflevector <4 x i32> %86, <4 x i32> %87, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %89 = add i32 %4, -1253254570
  %90 = add nsw i32 %14, 1684936478
  %91 = extractelement <4 x i32> %87, i64 1
  %92 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %91) #0
  %93 = extractelement <4 x i32> %87, i64 3
  %94 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %93) #0
  %95 = insertelement <4 x i32> <i32 poison, i32 -845247145, i32 poison, i32 -766435501>, i32 %90, i64 0
  %96 = insertelement <4 x i32> %95, i32 %89, i64 2
  %97 = xor <4 x i32> %88, %96
  %98 = mul <4 x i32> %88, %96
  %99 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %100 = add i32 %4, 1401181199
  %101 = add nsw i32 %14, 534103459
  %102 = insertelement <4 x i32> poison, i32 %94, i64 0
  %103 = insertelement <4 x i32> %102, i32 %100, i64 1
  %104 = insertelement <4 x i32> %103, i32 %92, i64 2
  %105 = insertelement <4 x i32> %104, i32 %101, i64 3
  %106 = xor <4 x i32> %99, %105
  %107 = extractelement <4 x i32> %106, i64 0
  %108 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %107) #0
  %109 = extractelement <4 x i32> %106, i64 2
  %110 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %109) #0
  %111 = insertelement <4 x i32> <i32 -845247145, i32 poison, i32 -766435501, i32 poison>, i32 %108, i64 1
  %112 = insertelement <4 x i32> %111, i32 %110, i64 3
  %113 = mul <4 x i32> %106, %112
  %114 = xor <4 x i32> %106, %112
  %115 = shufflevector <4 x i32> %113, <4 x i32> %114, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %116 = add i32 %4, -239350328
  %117 = add nsw i32 %14, -616729560
  %118 = extractelement <4 x i32> %114, i64 3
  %119 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %118) #0
  %120 = extractelement <4 x i32> %114, i64 1
  %121 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %120) #0
  %122 = insertelement <4 x i32> <i32 poison, i32 -766435501, i32 poison, i32 -845247145>, i32 %116, i64 0
  %123 = insertelement <4 x i32> %122, i32 %117, i64 2
  %124 = xor <4 x i32> %115, %123
  %125 = mul <4 x i32> %115, %123
  %126 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %127 = add i32 %4, -1879881855
  %128 = add nsw i32 %14, -1767562579
  %129 = insertelement <4 x i32> poison, i32 %119, i64 0
  %130 = insertelement <4 x i32> %129, i32 %128, i64 1
  %131 = insertelement <4 x i32> %130, i32 %121, i64 2
  %132 = insertelement <4 x i32> %131, i32 %127, i64 3
  %133 = xor <4 x i32> %126, %132
  %134 = extractelement <4 x i32> %133, i64 2
  %135 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -845247145, i32 %134) #0
  %136 = extractelement <4 x i32> %133, i64 0
  %137 = tail call i32 @llvm.nvvm.mulhi.ui(i32 -766435501, i32 %136) #0
  %138 = insertelement <4 x i32> <i32 -766435501, i32 poison, i32 -845247145, i32 poison>, i32 %137, i64 1
  %139 = insertelement <4 x i32> %138, i32 %135, i64 3
  %140 = mul <4 x i32> %133, %139
  %141 = xor <4 x i32> %133, %139
  %142 = shufflevector <4 x i32> %140, <4 x i32> %141, <4 x i32> <i32 0, i32 5, i32 2, i32 7>
  %143 = ashr <4 x i32> %142, <i32 31, i32 31, i32 31, i32 31>
  %144 = xor <4 x i32> %143, %142
  %145 = sitofp <4 x i32> %144 to <4 x float>
  %146 = fmul <4 x float> %145, <float 0x3DFFFFFFE0000000, float 0x3DFFFFFFE0000000, float 0x3DFFFFFFE0000000, float 0x3DFFFFFFE0000000>
  %147 = insertelement <4 x float> poison, float %3, i64 0
  %shuffle = shufflevector <4 x float> %147, <4 x float> poison, <4 x i32> zeroinitializer
  %148 = fcmp ogt <4 x float> %146, %shuffle
  %149 = fsub float 1.000000e+00, %3
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %149) #0
  %151 = shl i32 %10, 9
  %152 = or i32 %151, %8
  %153 = or i32 %152, 128
  %154 = or i32 %152, 256
  %155 = or i32 %152, 384
  %156 = icmp slt i32 %152, %2
  %157 = sext i32 %152 to i64
  %158 = getelementptr float, float addrspace(1)* %0, i64 %157
  %159 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(float addrspace(1)* %158, i1 %156, i32 0, i1 %156) #0
  %160 = bitcast i32 %159 to <1 x float>
  %161 = extractelement <1 x float> %160, i64 0
  %162 = icmp slt i32 %153, %2
  %163 = sext i32 %153 to i64
  %164 = getelementptr float, float addrspace(1)* %0, i64 %163
  %165 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(float addrspace(1)* %164, i1 %162, i32 0, i1 %162) #0
  %166 = bitcast i32 %165 to <1 x float>
  %167 = extractelement <1 x float> %166, i64 0
  %168 = icmp slt i32 %154, %2
  %169 = sext i32 %154 to i64
  %170 = getelementptr float, float addrspace(1)* %0, i64 %169
  %171 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(float addrspace(1)* %170, i1 %168, i32 0, i1 %168) #0
  %172 = bitcast i32 %171 to <1 x float>
  %173 = extractelement <1 x float> %172, i64 0
  %174 = icmp slt i32 %155, %2
  %175 = sext i32 %155 to i64
  %176 = getelementptr float, float addrspace(1)* %0, i64 %175
  %177 = tail call i32 asm sideeffect "@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(float addrspace(1)* %176, i1 %174, i32 0, i1 %174) #0
  %178 = bitcast i32 %177 to <1 x float>
  %179 = extractelement <1 x float> %178, i64 0
  %180 = fmul float %150, %161
  %181 = extractelement <4 x i1> %148, i64 3
  %182 = uitofp i1 %181 to float
  %183 = fmul float %180, %182
  %184 = fmul float %150, %167
  %185 = extractelement <4 x i1> %148, i64 2
  %186 = uitofp i1 %185 to float
  %187 = fmul float %184, %186
  %188 = fmul float %150, %173
  %189 = extractelement <4 x i1> %148, i64 1
  %190 = uitofp i1 %189 to float
  %191 = fmul float %188, %190
  %192 = fmul float %150, %179
  %193 = extractelement <4 x i1> %148, i64 0
  %194 = uitofp i1 %193 to float
  %195 = fmul float %192, %194
  %196 = getelementptr float, float addrspace(1)* %1, i64 %157
  %197 = bitcast float %183 to i32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, float addrspace(1)* %196, i1 %156) #0
  %198 = getelementptr float, float addrspace(1)* %1, i64 %163
  %199 = bitcast float %187 to i32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, float addrspace(1)* %198, i1 %162) #0
  %200 = getelementptr float, float addrspace(1)* %1, i64 %169
  %201 = bitcast float %191 to i32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, float addrspace(1)* %200, i1 %168) #0
  %202 = getelementptr float, float addrspace(1)* %1, i64 %175
  %203 = bitcast float %195 to i32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %203, float addrspace(1)* %202, i1 %174) #0
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: nofree nosync nounwind readnone speculatable
declare i32 @llvm.nvvm.read.ptx.sreg.ctaid.x() #1

; Function Attrs: alwaysinline mustprogress nofree nosync nounwind readnone willreturn
define i32 @__nv_umulhi(i32 %x, i32 %y) local_unnamed_addr #2 {
  %1 = tail call i32 @llvm.nvvm.mulhi.ui(i32 %x, i32 %y)
  ret i32 %1
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.nvvm.mulhi.ui(i32, i32) #3

attributes #0 = { nounwind }
attributes #1 = { nofree nosync nounwind readnone speculatable }
attributes #2 = { alwaysinline mustprogress nofree nosync nounwind readnone willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }

!nvvm.annotations = !{!0, !1, !0}
!llvm.ident = !{!2}
!llvm.module.flags = !{!3}

!0 = !{void (float addrspace(1)*, float addrspace(1)*, i32, float, i32, i32)* @dropout_forward_kernel_0d1d2d345, !"kernel", i32 1}
!1 = !{void (float addrspace(1)*, float addrspace(1)*, i32, float, i32, i32)* @dropout_forward_kernel_0d1d2d345, !"maxntidx", i32 128}
!2 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!3 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
